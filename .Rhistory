WDPA_only_mask <- mask(Marine_STAR, WDPA_only)
Combined_KBA_WDPA_sum <- global(Combined_KBA_WDPA_mask, fun= "sum", na.rm = TRUE) %>% unlist()
KBA_sum <- global(KBA_only_mask, fun= "sum", na.rm = TRUE) %>% unlist()
WDPA_sum <- global(WDPA_only_mask, fun= "sum", na.rm = TRUE) %>% unlist()
STAR_sum <- global(Marine_STAR, fun= "sum", na.rm = TRUE) %>% unlist()
Not_PA <- STAR_sum - Combined_KBA_WDPA_sum - KBA_sum - WDPA_sum
MSA <- c(Combined_KBA_WDPA_sum, WDPA_sum, KBA_sum, Not_PA)
Category <- c("Designated as PA and KBA", "Designated as PA", "Designated as KBA", "No Designation")
Combined_KBA_WDPA_prop <- Combined_KBA_WDPA_sum / STAR_sum
KBA_prop <- KBA_sum / STAR_sum
WDPA_prop <- WDPA_sum / STAR_sum
Not_PA_prop <- Not_PA / STAR_sum
#remotes::install_github("hrbrmstr/waffle")
library(waffle)
library(hrbrthemes)
# add in Segoe UI as a font for the plot
windowsFonts(`Segoe UI` = windowsFont('Segoe UI'))
# read in the data, see the example data template in the GitHub folder - DO NOT CHANGE THE COLUMN NAMES
data <- data.frame(Category, MSA)
# set the order of factors, the code below sort alphabetically, but then puts the "Other" category last
data$Category <- factor(data$Category , levels=c("Designated as PA and KBA", "Designated as PA", "Designated as KBA", "No Designation"))
# load required packages
library(ggplot2)
library(grid)
library(emojifont)
# load in Segoe UI as a font
windowsFonts(`Segoe UI` = windowsFont('Segoe UI'))
# read in the data - see the example on the GitHub page
# YOU ONLY NEED TO CHANGE THE VALUES IN THE MSAppb COLUMN - LEAVE EVERYTHING ELSE AS IT IS
dataset <- read.csv("C:/Users/JoeTurner/Downloads/quadrant_plot_example_data.csv")
data$x <- dataset$x
data$y <- dataset$y
data <- data %>% mutate(prop = scales::percent(MSA / sum(MSA)))
# read in the data - see the example on the GitHub page
# YOU ONLY NEED TO CHANGE THE VALUES IN THE MSAppb COLUMN - LEAVE EVERYTHING ELSE AS IT IS
dataset <- read.csv("C:/Users/JoeTurner/Documents/GitHub/general_scripts/quadrant_plot_example_data.csv")
data$x <- dataset$x
data$y <- dataset$y
data <- data %>% mutate(prop = scales::percent(MSA / sum(MSA)))
data$label <- emoji('fish')
# make the initial plot
p <- ggplot(data, aes(x = x, y = y, colour = Category))
# set the x axis limits
p <- p + scale_x_continuous(expand = c(0, 0), limits = c(0, 100))
# set the y axis limits
p <- p + scale_y_continuous(expand = c(0, 0), limits = c(0, 100))
# remove axis titles
p <- p + theme(axis.title.x = element_blank())
p <- p + theme(axis.title.y = element_blank())
# remove asix ticks and text from the plot
p <- p + theme(
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
# set colours of quadrants
p <- p +
annotate("rect", xmin = 50, xmax = 100, ymin = 50, ymax = 100, fill= "#F8F9F9")  +
annotate("rect", xmin = 0, xmax = 50, ymin = 0, ymax = 50 , fill= "#F8F9F9") +
annotate("rect", xmin = 50, xmax = 100, ymin = 0, ymax = 50, fill= "white") +
annotate("rect", xmin = 0, xmax = 50, ymin = 50, ymax = 100, fill= "white")
# add boarder to plot
p <- p + theme(panel.border = element_rect(colour = "#808080", fill=NA, size=4))
# add horizontal line to the plot to make quadrants
p <- p + geom_hline(yintercept=50, color = "#808080", size=1.5)
# add vertical line to the plot to make quadrants
p <- p + geom_vline(xintercept=50, color = "#808080", size=1.5)
# add labels to the quadrants
p <- p + geom_label(aes(x = 25, y = 97, label = "Designated as PA and KBA", family = "Segoe UI"),
label.padding = unit(2, "mm"),  fill = "#808080", color="white", size = 16)
p <- p + geom_label(aes(x = 75, y = 97, label = "Designated as PA", family = "Segoe UI"),
label.padding = unit(2, "mm"), fill = "#808080", color="white", size = 16)
p <- p + geom_label(aes(x = 25, y = 4, label = "Designated as KBA", family = "Segoe UI"),
label.padding = unit(2, "mm"),  fill = "#808080", color="white", size = 16)
p <- p + geom_label(aes(x = 75, y = 4, label = "No Designation", family = "Segoe UI"),
label.padding = unit(2, "mm"), fill = "#808080", color="white", size = 16)
# add the points from the data and scale based upon the MSAppb values
p <- p + geom_point(aes(fill=Category, size=as.numeric(MSA)), colour="black", shape=21, stroke = 1) +  scale_size_continuous(range = c(5, 20))
# colour the points
p <- p + scale_fill_manual(values = c("#154360", "#2471a3", "#85c1e9", "#d5d8dc"))
# remove legend
p <- p + theme(legend.position = "none")
# add text labels to the points
p <- p  + geom_text(aes(label = prop), color = "black", vjust=8, size=10, family = "Segoe UI")
# check the plot
p
# export plots - choose where you want to export the plot to and what you want to name it as.
# you can also change the size of the image and adjust as necessary
# you need to run all of the lines below. the png() function opens the connection and the dev.off() function closes it
png("C:/working/Marine_STAR/Outputs_v5/quadrant_figure.png", units="cm", width=10, height=10, res=500)
p
dev.off()
# species lists
library(rredlist)
library(viridis)
library(data.table)
library(readxl)
library(stringr)
library(arcgisbinding)
arc.check_product()
library(terra)
library(sf)
library(tidyverse)
library(rnaturalearth)
library(Matrix)
# set path
path <- "C:/working/Marine_STAR/"
# set default crs (Mollweide)
crs <- "+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84"
# get species informaion
species_info <- fread("C:/working/Marine_STAR/Outputs_v4/10_All_Species_Range_Info_STAR_scores_Update.csv")
# filter those that have threats assessed
species_info <- species_info %>% filter(rowSums(select(., contains("Multiplier.Impact.Threat"))) != 0)
# select certain columns
species_info_select <- species_info %>% select(-common_name, -biome_marine, -result.scientific_name)
# get total population decline
species_info_select <- species_info_select %>% mutate(TOTAL_DECLINE = rowSums(select(., contains("Multiplier.Impact.Threat"))))
# get species informaion
species_info <- fread("C:/working/Marine_STAR/Outputs_v5/10_All_Species_Range_Info_STAR_scores_Update.csv")
names(species_info)
# get species informaion
species_info <- fread("C:/working/Marine_STAR/Outputs_v5/10_All_Species_Range_Info_STAR_scores_Update.csv")
# Split STAR score by threat
species_info_select <- species_info_select %>% select(contains("Threat"))
# Split STAR score by threat
species_info_select <- species_info %>% select(contains("Threat"))
View(species_info_select)
star_scores <- data.frame(species_info$STAR_score_cell)
data <- Map('*', species_info_select, star_scores)
View(data)
data <- rbindlist(data)
View(data)
data <- cbindlist(data)
data <- species_info_select * star_scores
View(species_info_select)
View(star_scores)
i = 1
row <- species_info_select[i,]
multiplier <- star_scores[i]
multiplier <- star_scores[i] %>% unlist()
multiplier <- star_scores[i,] %>% unlist()
result <- row * multiplier
View(result)
View(row)
list[[i]] <- result
list <- list()
row <- species_info_select[i,]
multiplier <- star_scores[i,] %>% unlist()
result <- row * multiplier
list[[i]] <- result
for(i in 1:ncol(species_info_select)) {
print(i)
row <- species_info_select[i,]
multiplier <- star_scores[i,] %>% unlist()
result <- row * multiplier
list[[i]] <- result
}
threat_score_result <- rbindlist(list)
View(threat_score_result)
for(i in 1:nrow(species_info_select)) {
print(i)
row <- species_info_select[i,]
multiplier <- star_scores[i,] %>% unlist()
result <- row * multiplier
list[[i]] <- result
}
threat_score_result <- rbindlist(list)
View(threat_score_result)
threat_score_result <- threat_score_result %>% rename_with( ~ paste("STAR_score_", .x, sep = "_"))
species_info_join <- merge(species_info, threat_score_result, by = 0)
species_info_join <- merge(species_info, threat_score_result, by = 0, all=TRUE)
?merge
species_info_join <- base::merge(species_info, threat_score_result, by = 0, all=TRUE)
View(threat_score_result)
species_info_join <- cbind(species_info, threat_score_result)
View(species_info_join)
threat_score_result <- rbindlist(list)
threat_score_result <- threat_score_result %>% rename_with( ~ paste("STAR_score", .x, sep = "_"))
species_info_join <- cbind(species_info, threat_score_result)
# add in row names to get column number
species_info_join <- species_info_join %>% rownames_to_column() %>% rename(Column_ID = rowname)
# add in row names to get column number
species_info_join <- species_info_join %>% rownames_to_column() %>% rename(Column_ID = rowname)
# make column names column too
species_info_join <- species_info_join %>% mutate(Column_Name = gsub(" ", "_", binomial))
View(species_info_join)
# write metadata file
write.csv(species_info_join, "C:/working/Marine_STAR/Outputs_v5/00_MARINE_STAR_METADATA.csv", row.names = FALSE, na = "")
# get species names
names <- list.files(path = "C:/working/Marine_STAR/Temp_v5/03_Rasters_AoH_habitat_marine", pattern = "\\.tif$")
names <- gsub(".tif", "", names)
names1 <- gsub("_", " ", names)
all_species_files_species_number <- list.files("C:/working/Marine_STAR/Temp_v5/03_Rasters_AoH_habitat_marine", pattern = "\\.tif$", full.names = TRUE)
matrix_list <- list()
template.matrix <- sparseMatrix(dims = c(24598795,0), i={}, j={})
gc()
for (i in 1:length(all_species_files_species_number)) {
print(i)
raster <- rast(all_species_files_species_number[i])
raster_no0 <- classify(raster, cbind(NA, 0))
#sp.raster.df <- terra::as.data.frame(raster, xy = TRUE, na.rm = FALSE) # Convert AOH Raster to DF
#sp.raster.df <- sp.raster.df %>% rownames_to_column()
#sp.raster.df <- sp.raster.df %>% mutate(value = ifelse(is.na(value), 0, value)) #if there is an NA put a 0 / this is important to do
#names(sp.raster.df) <- c("ID", "x",       "y",       names[i] )
#Marine_STAR_df <- Marine_STAR_df %>% left_join(sp.raster.df)
matrix <- as.matrix(raster_no0, wide=FALSE, na.rm = FALSE)
colnames(matrix) <- names[i]
A <- as(matrix, "sparseMatrix") # see also `vignette("Intro2Matrix")`
writeMM(A, file= paste0("C:/working/Marine_STAR/Temp_v5/08_SparseMatricesSpecies/",names[i],'.txt'))
#Marine_STAR_sparse_matrix <- cbind(Marine_STAR_sparse_matrix, A)
template.matrix <- cbind(template.matrix, A)
matrix_list[[i]] <- A
}
writeMM(template.matrix, file= paste0("C:/working/Marine_STAR/Outputs_v5/Marine_STAR_sparse_matrix.txt"))
# list all csv files
txt_files <- list.files("C:/working/Marine_STAR/Temp_v5/SparseMatricesSpecies/", pattern = ".txt", full.names = TRUE)
# data frames
matricies <- lapply(txt_files, readMM)
# read in and combine
bind_matrix <- do.call(cbind, matricies)
# write to data frame
writeMM(bind_matrix, file= paste0("C:/working/Marine_STAR/Outputs_v5/Marine_STAR_sparse_matrix_noCoords.txt"))
# read in marine STAR layer
Marine_STAR <- rast("C:/working/Marine_STAR/Outputs_v5/Marine_STAR_Layer_v2.tif")
# make df
Marine_STAR_df <- terra::as.data.frame(Marine_STAR, xy = TRUE, na.rm = FALSE) #CellIDs with xy / Total number of cells: 24598795
# convert rownames to ID
Marine_STAR_df <- Marine_STAR_df %>% rownames_to_column()
# change names
names(Marine_STAR_df) <- c("Row_ID", "x",       "y",       "STAR_Score" )
# write to file
write.csv(Marine_STAR_df, "C:/working/Marine_STAR/Outputs_v5/Marine_STAR_Dataframe.csv", row.names = FALSE, na = "")
# convert to sf
Marine_STAR_sf <- st_as_sf(Marine_STAR_df, coords = c("x", "y"))
# set crs
st_crs(Marine_STAR_sf) <- crs
library(prepr)
# read in EEZ
EEZ <- read_sf("C:/working/Data/EEZ/NatEarthCountry_EEZv11_EDITED_FINAL_moll.shp")
EEZ <- EEZ %>% select( -Shape_Leng, -Shape_Area)
names(EEZ) <- c("EEZ_Territory",    "admin",      "adm0_a3",    "iso_a3",     "name_long",    "continent",    "region_un",
"subregion",    "region_wb",    "geometry")
EEZ_fix <- st_prepair(EEZ)
st_is_valid(EEZ_fix)
# set crs
EEZ_fix <- st_transform(EEZ_fix, crs)
# select appropriate column
location_select <- EEZ_fix %>% select(EEZ_Territory, admin, geometry)
EEZ <- read_sf("C:/working/Data/EEZ/NatEarthCountry_EEZv11_EDITED_FINAL_moll.shp")
EEZ <- EEZ %>% select( -Shape_Leng, -Shape_Area)
names(EEZ) <- c("EEZ_Territory",    "admin",      "adm0_a3",    "iso_a3",     "name_long",    "continent",    "region_un",
"subregion",    "region_wb",    "geometry")
EEZ_fix <- st_prepair(EEZ)
st_is_valid(EEZ_fix)
#st_probustness(EEZ_fix)
#plot(st_geometry(EEZ_fix))
st_is_valid(EEZ_fix)
EEZ_vect <- vect(EEZ)
extent1 <- c(-180, 180,-90,90)
extent2 <- c(180, 200,-90,90)
w1 <- terra::crop(EEZ_vect, extent1)
w2 <- terra::crop(EEZ_vect, extent2)
w1 <- st_as_sf(w1)
w2 <- st_as_sf(w2)
cross_countries <- w2 %>% st_drop_geometry() %>% select(EEZ_Territory) %>% unique() %>% unlist()
w3 <- w1 %>% filter(EEZ_Territory %in% cross_countries)
w4 <- w1 %>% filter(!EEZ_Territory %in% cross_countries)
w3 <- st_cast(w3, "POLYGON")
EEZ_fix <-  w3 %>% bind_rows(w4)
EEZ_fix <- EEZ_fix %>% rownames_to_column("ID") %>% st_make_valid()
EEZ_fix <- st_prepair(EEZ_fix)
st_is_valid(EEZ_fix)
# set crs
EEZ_fix <- st_transform(EEZ_fix, crs)
EEZ_vect <- vect(EEZ)
extent1 <- c(-180, 180,-90,90)
extent2 <- c(180, 200,-90,90)
w1 <- terra::crop(EEZ_vect, extent1)
w2 <- terra::crop(EEZ_vect, extent2)
w1 <- st_as_sf(w1)
w2 <- st_as_sf(w2)
cross_countries <- w2 %>% st_drop_geometry() %>% select(EEZ_Territory) %>% unique() %>% unlist()
# read in EEZ
EEZ <- read_sf("C:/working/Data/EEZ/NatEarthCountry_EEZv11_EDITED_FINAL.shp")
EEZ <- EEZ %>% select( -Shape_Leng, -Shape_Area)
names(EEZ) <- c("EEZ_Territory",    "admin",      "adm0_a3",    "iso_a3",     "name_long",    "continent",    "region_un",
"subregion",    "region_wb",    "geometry")
EEZ_fix <- st_prepair(EEZ)
st_is_valid(EEZ_fix)
st_is_valid(EEZ_fix)
EEZ_vect <- vect(EEZ)
extent1 <- c(-180, 180,-90,90)
extent2 <- c(180, 200,-90,90)
w1 <- terra::crop(EEZ_vect, extent1)
w2 <- terra::crop(EEZ_vect, extent2)
w1 <- st_as_sf(w1)
w2 <- st_as_sf(w2)
cross_countries <- w2 %>% st_drop_geometry() %>% select(EEZ_Territory) %>% unique() %>% unlist()
w3 <- w1 %>% filter(EEZ_Territory %in% cross_countries)
w4 <- w1 %>% filter(!EEZ_Territory %in% cross_countries)
w3 <- st_cast(w3, "POLYGON")
EEZ_fix <-  w3 %>% bind_rows(w4)
EEZ_fix <- EEZ_fix %>% rownames_to_column("ID") %>% st_make_valid()
EEZ_fix <- st_prepair(EEZ_fix)
st_is_valid(EEZ_fix)
# set crs
EEZ_fix <- st_transform(EEZ_fix, crs)
# select appropriate column
location_select <- EEZ_fix %>% select(EEZ_Territory, admin, geometry)
# change the codes that don't match but are in countries
location_select <- location_select %>% mutate(admin = str_replace(admin, "United States$", "United States of America"))
location_select <- location_select %>% mutate(admin = str_replace(admin, "Comores", "Comoros"))
location_select <- location_select %>% mutate(admin = str_replace(admin, "Republic of Mauritius", "Mauritius"))
location_select <- location_select %>% mutate(admin = str_replace(admin, "Tanzania$", "United Republic of Tanzania"))
location_select <- location_select %>% mutate(admin = str_replace(admin, "Bahamas", "The Bahamas"))
location_select <- location_select %>% mutate(admin = str_replace(admin, "Guinea-Bissau", "Guinea Bissau"))
location_select <- location_select %>% mutate(admin = str_replace(admin, "Micronesia$", "Federated States of Micronesia"))
location_select <- location_select %>% mutate(admin = str_replace(admin, "Federal Republic of Somalia", "Somalia"))
location_select <- location_select %>% mutate(EEZ_Territory = str_replace(EEZ_Territory, "United States$", "United States of America"))
location_select <- location_select %>% mutate(EEZ_Territory = str_replace(EEZ_Territory, "Comores", "Comoros"))
location_select <- location_select %>% mutate(EEZ_Territory = str_replace(EEZ_Territory, "Republic of Mauritius", "Mauritius"))
location_select <- location_select %>% mutate(EEZ_Territory = str_replace(EEZ_Territory, "Tanzania$", "United Republic of Tanzania"))
location_select <- location_select %>% mutate(EEZ_Territory = str_replace(EEZ_Territory, "Bahamas$", "The Bahamas"))
location_select <- location_select %>% mutate(EEZ_Territory = str_replace(EEZ_Territory, "Guinea-Bissau", "Guinea Bissau"))
location_select <- location_select %>% mutate(EEZ_Territory = str_replace(EEZ_Territory, "Micronesia$", "Federated States of Micronesia"))
location_select <- location_select %>% mutate(EEZ_Territory = str_replace(EEZ_Territory, "Federal Republic of Somalia", "Somalia"))
location_select$EEZ_Territory %>% unique()
location_select$EEZ_Territory %>% unique() %>% sort()
# join to marine STAR
Marine_STAR_sf <- Marine_STAR_sf %>% st_join(location_select)
# change NA to ABNJ
Marine_STAR_sf <- Marine_STAR_sf %>% replace_na(list(EEZ_Trr = "ABNJ", admin = "ABNJ"))
# change geometry to coordinates
Marine_STAR_sf <- Marine_STAR_sf %>%
mutate(long = unlist(map(Marine_STAR_sf$geometry,1)),
lat = unlist(map(Marine_STAR_sf$geometry,2)))
# change to df
Marine_STAR_df <- Marine_STAR_sf %>% st_drop_geometry()
# write to file
write.csv(Marine_STAR_df, "C:/working/Marine_STAR/Outputs_v5/Marine_STAR_Dataframe_Location.csv", row.names = FALSE, na = "")
# write to file
st_write(Marine_STAR_sf, "C:/working/Marine_STAR/Outputs_v5/Marine_STAR_Shapefile.shp")
library(rredlist)
library(viridis)
library(data.table)
library(readxl)
library(stringr)
library(arcgisbinding)
arc.check_product()
library(terra)
library(sf)
library(sp)
library(tidyverse)
library(exactextractr)
library(rnaturalearth)
library(rnaturalearthdata)
library(prepr)
# set path
path <- "C:/working/Marine_STAR/"
# set default crs (Mollweide)
crs <- "+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84"
################################################################################################################################################################
######################
#### Read in Data ####
######################
# read in Marine STAR
Marine_STAR <- rast("C:/working/Marine_STAR/Outputs_v5/Marine_STAR_Layer_v2.tif")
# remove zero's for calculations
Marine_STAR_no0 <- classify(Marine_STAR, cbind( -Inf, 0, NA))
# read in STAR T
STAR <- rast("C:/working/Data/STAR/all_STARscores.tif")
STAR_T <- STAR$all_STARscores_1
STAR_T <- resample(STAR_T, Marine_STAR)
STAR_T <- classify(STAR_T, cbind(NA, NA, 0), right=FALSE)
Marine_STAR_sum <- Marine_STAR_sum %>% unlist()
# summarise for sum, mean, max, and min
Marine_STAR_sum <- global(Marine_STAR, fun= "sum", na.rm = TRUE)
Marine_STAR_mean <-global(Marine_STAR_no0, fun= "mean", na.rm = TRUE)
Marine_STAR_max <-global(Marine_STAR, fun= "max", na.rm = TRUE)
Marine_STAR_min <-global(Marine_STAR_no0, fun= "min", na.rm = TRUE)
Marine_STAR_sum <- Marine_STAR_sum %>% unlist()
# get list of rasters
marine_star_layers <- list.files("C:/working/Marine_STAR/Outputs_v5/Threat_Rasters/", pattern = "Marine_STAR_Threat_", full.names = TRUE)
raster_names <- list.files("C:/working/Marine_STAR/Outputs_v5/Threat_Rasters/", pattern = "Marine_STAR_Threat_")
raster_names <- gsub(".tif", "", raster_names)
#get list of threat names
threat_codes <- fread("C:/working/Marine_STAR/threats2.csv")
threat_codes$result.title <- gsub("\\s*\\([^\\)]+\\)","",threat_codes$result.title)
threat_codes <- threat_codes %>% select(result.code,	result.title) %>% unique() %>%
mutate(level = str_count(result.code,"\\.") + 1) %>%
filter(level == 2) %>%
select(-level) %>%
filter(!grepl("8.",result.code))
# add the threat 8s back in
result.code <- c("8.1", "8.2","8.3","8.4", "8.5", "8.6", "1", "2", "3", "4","5","6","7","8","9","10","11","12")
result.title <- c("Invasive non-native/alien species/diseases",
"Problematic native species/diseases",
"Introduced genetic material",
"Problematic species/diseases of unknown origin",
"Viral/prion-induced diseases",
"Diseases of unknown cause",
"Residential & commercial development",
"Agriculture & aquaculture",
"Energy production & mining",
"Transportation & service corridors",
"Biological resource use",
"Human intrusions & disturbance",
"Natural system modifications",
"Invasive & other problematic species, genes & diseases",
"Pollution",
"Geological events",
"Climate change & severe weather",
"Other options")
threat_8_codes <- data.frame(result.code, result.title)
threat_codes <- threat_codes %>% bind_rows(threat_8_codes)
threat_df <- data.frame(matrix(ncol = 5, nrow = length(marine_star_layers)))
colnames(threat_df) <- c("threat", "sum",	"mean",	"max",	"min")
View(threat_df)
for (i in 1:length(marine_star_layers)) {
# print to check status
print(i)
raster <- rast(marine_star_layers[i])
name <- raster_names[i]
name <- gsub("Marine_STAR_Threat_", "", name)
name <- gsub("\\_", "\\.", name)
Threat_1_sum <- global(raster, fun= "sum", na.rm = TRUE)
Threat_1_mean <-global(raster, fun= "mean", na.rm = TRUE)
Threat_1_max <-global(raster, fun= "max", na.rm = TRUE)
Threat_1_min <-global(raster, fun= "min", na.rm = TRUE)
threat_df$threat[i] <- name
threat_df$sum[i] <- Threat_1_sum
threat_df$mean[i] <- Threat_1_mean
threat_df$max[i] <- Threat_1_max
threat_df$min[i] <- Threat_1_min
}
View(threat_df)
threat_df$sum <- as.numeric(threat_df$sum)
threat_df$mean <- as.numeric(threat_df$mean)
threat_df$min <- as.numeric(threat_df$min)
threat_df$max <- as.numeric(threat_df$max)
threat_df <- threat_df %>% left_join(threat_codes, by = c("threat" = "result.code")) %>%
mutate(level = str_count(threat,"\\.") + 1)
threat_df_level_1 <- threat_df %>% filter(level == 1) %>% select(-level) %>% mutate(prop = as.numeric(sum) / Marine_STAR_sum)
threat_df_level_2 <- threat_df %>% filter(level == 2) %>%
select(-level) %>%
mutate(prop = as.numeric(sum) / Marine_STAR_sum) %>%
mutate(level_1_threat = gsub("\\..*","",threat))
threat_df_level_2 <- threat_df_level_2 %>% left_join(select(threat_df_level_1, c(threat, sum)), by = c("level_1_threat" = "threat"))
threat_df_level_2 <- threat_df_level_2 %>%
rename(sum = sum.x) %>%
rename(sum_level_1 = sum.y) %>%
mutate(prop_level_1_threat = as.numeric(sum) / as.numeric(sum_level_1))
threat_df_level_1 <- threat_df_level_1 %>% select(threat, result.title, everything())
threat_df_level_2 <- threat_df_level_2 %>% select(-level_1_threat) %>% select(threat, result.title, everything())
sum(threat_df_level_1$prop)
sum(threat_df_level_1$sum)
sum(threat_df_level_2$prop)
sum(threat_df_level_2$sum)
View(threat_df_level_1)
# write to file
write_csv(threat_df_level_1, "C:/working/Marine_STAR/Outputs_v5/05a_Threat_Summary_Level_1.csv")
write_csv(threat_df_level_2, "C:/working/Marine_STAR/Outputs_v5/05b_Threat_Summary_Level_2.csv")
# write to file
write_csv(threat_df_level_1, "C:/working/Marine_STAR/Outputs_v5/06a_Threat_Summary_Level_1.csv")
write_csv(threat_df_level_2, "C:/working/Marine_STAR/Outputs_v5/06b_Threat_Summary_Level_2.csv")
# species lists
library(rredlist)
library(viridis)
library(data.table)
library(readxl)
library(stringr)
library(arcgisbinding)
arc.check_product()
library(terra)
library(sf)
library(tidyverse)
library(rnaturalearth)
library(Matrix)
# set path
path <- "C:/working/Marine_STAR/"
# set default crs (Mollweide)
crs <- "+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84"
# list all csv files
txt_files <- list.files("C:/working/Marine_STAR/Temp_v5/08_SparseMatricesSpecies/", pattern = ".txt", full.names = TRUE)
# data frames
matricies <- lapply(txt_files, readMM)
# read in and combine
bind_matrix <- do.call(cbind, matricies)
# write to data frame
writeMM(bind_matrix, file= paste0("C:/working/Marine_STAR/Outputs_v5/Marine_STAR_sparse_matrix_noCoords.txt"))
setwd("C:/Users/JoeTurner/Documents/GitHub/cv")
# Knit the HTML version
rmarkdown::render("cv_turner.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv_turner.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = "cv_turner.rmd",
output = "cv_turner.pdf")
?pagedown
?/pagedown
??pagedown
??chrome_print
setwd("C:/Users/JoeTurner/Documents/GitHub/cv")
# Convert to PDF using Pagedown
pagedown::chrome_print(input = "cv_turner.rmd",
output = "cv_turner.pdf")
